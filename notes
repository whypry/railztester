Software process
-architecture
-conventions & standards
-version control
-coordination (agile, etc)
-TDD

Tests provide
(difference between tests and test driven development)
-documentation of code
-catch future errors
-long-term time savings

tests are just a tool not a PROCESS

TDD:
1. decide what the code will do
2. write a test that will pass if the code does that thing
3. run the test, see it fail
4. (then and only then do we) write the code

do this for every couple of lines of code, every method

TDD provides
-design and plan before you code
2. document your design
3. proof that code implements design
**4. encourages design of testable code**

if you write test first, you can't write test that's too complicated. with testing,
you have made

Testable code
-modular
-decoupled design
-methods of limited scope

cyclomatic complexity - measure of how many paths there are through the code
-every conditional gives another route through the code --> another test you have to write
for the method
